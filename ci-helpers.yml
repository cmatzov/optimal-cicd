.clear-test-and-db-restore:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_CLEAR == "yes"'
  tags: 
    - optimal-novus-runner
  script:
    - /automations/runner/clear-test-and-db-restore.sh

.ikea-daily-backups:
  tags:
    - optimal-novus-runner
  environment:
    name: stage
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $BACKUPS == "yes"'
  script:
    - /automations/runner/ikea-daily-backups.sh

.analyze-backend:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      changes:
        - net/**/*
  tags:
    - optimal-novus-runner
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd ./net
    - dotnet tool restore
    - dotnet build
    - dotnet roslynator analyze | grep "^0 diagnostics found$" > roslynator.txt
    - dotnet jb inspectcode -o=inspectcode.xml --no-build Optimal.Novus.sln && grep "<Issues />" ./inspectcode.xml
  artifacts:
    paths:
      - net/inspectcode.xml
      - net/roslynator.txt
    expire_in: 1 day
    when: always
  allow_failure: true

.analyze-frontend:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      changes:
        - js/**/*
  tags:
    - optimal-novus-runner
  image: node:16
  script:
    - cd js
    - npm install
    - npm install -g expo-cli
    - cd packages/mobile
    - npm run install:mobile
    - cd ../..
    - npm run lint > fe-lint.txt
  artifacts:
    paths:
      - js/fe-lint.txt
    expire_in: 1 day
    when: always
  allow_failure: true
    
.build-ikea:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-IKEA-TAG.txt
      export PROJECT="ikea"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/ikea/**/*
        - net/shared/**/*
        - js/package.json
        - js/apps/mobile/package.json
        - js/apps/mobile/src/ikea/**/*
        - js/apps/mobile/src/shared/**/*
        - js/packages/common/package.json
        - js/packages/common/src/ikea-api/**/*
        - js/packages/common/src/shared/**/*
        - js/packages/web/package.json
        - js/packages/web/src/ikea/**/*
        - js/packages/web/src/shared/**/*
      when: manual

.build-ikea-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-IKEA-TAG.txt
      export PROJECT="ikea"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      when: manual

.build-ikea-stage:
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - git fetch --all
    - VERSION=$(/automations/runner/versioning.sh IK Staging)
    - export TAG=$VERSION
    - echo $TAG
    - echo $TAG > /automations/runner/STAGE-IKEA-TAG.txt
    - export PROJECT="ikea"
    - devops/pipelines/build/docker-tmp.sh
    - docker-compose --env-file /automations/runner/.env config
    - docker-compose --env-file /automations/runner/.env build
    - docker-compose --env-file /automations/runner/.env push
    - curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "develop" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
      when: manual

.build-ikea-prod:
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh IK Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/develop-IKEA-TAG.txt
      export PROJECT="ikea"
      export KC_HOSTNAME_URL="ikea.optim-al.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
      when: manual

.scheduled-docker-ikea-stage:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_STAGE_IKEA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - git fetch --all
    - VERSION=$(/automations/runner/versioning.sh IK Staging)
    - export TAG=$VERSION
    - echo $TAG > /automations/runner/STAGE-IKEA-TAG.txt
    - export PROJECT="ikea"
    - devops/pipelines/build/docker-tmp.sh
    - docker-compose --env-file /automations/runner/.env config
    - docker-compose --env-file /automations/runner/.env build
    - docker-compose --env-file /automations/runner/.env push
    - curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.scheduled-docker-ikea-prod:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_PROD_IKEA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh IK Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/master-IKEA-TAG.txt
      export PROJECT="ikea"
      export KC_HOSTNAME_URL="ikea.optim-al.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.build-verila:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      echo $TAG > /automations/runner/${BRANCH}-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/verila/**/*
        - net/shared/**/*
        - js/package.json
        - js/apps/mobile/package.json
        - js/apps/mobile/src/verila/**/*
        - js/apps/mobile/src/shared/**/*
        - js/packages/common/package.json
        - js/packages/common/src/verila-api/**/*
        - js/packages/common/src/shared/**/*
        - js/packages/web/package.json
        - js/packages/web/src/verila/**/*
        - js/packages/web/src/shared/**/*
      when: manual

.build-verila-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual

.build-verila-stage:
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Staging)
      export TAG=$VERSION
      echo $TAG > /automations/runner/STAGE-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "develop" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
      when: manual

.build-verila-prod:
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/develop-VERILA-TAG.txt
      export PROJECT="verila"
      export KC_HOSTNAME_URL="cus.verila-bg.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
      when: manual

.scheduled-docker-verila-stage:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_STAGE_VERILA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Staging)
      export TAG=$VERSION
      echo $TAG > /automations/runner/STAGE-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.scheduled-docker-verila-prod:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_PROD_VERILA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/master-VERILA-TAG.txt
      export PROJECT="verila"
      export KC_HOSTNAME_URL="cus.verila-bg.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.build-kti:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-KTI-TAG.txt
      export PROJECT="kti"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH == "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/kti/**/*
        - js/apps/mobile/src/kti/**/*
        - js/packages/common/src/kti-api/**/*
        - js/packages/web/src/kti/**/*
      when: manual

.build-kti-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-KTI-TAG.txt
      export PROJECT="kti"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config 
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      when: manual

.docker-build-biovet:
  tags: 
    - optimal-veteris-runner
  script:
    - export TAG=$CI_PIPELINE_ID
    - git fetch --all
    - git merge origin/master
    - TAG=$TAG ENVIRONMENT=test docker-compose build
    - TAG=$TAG ENVIRONMENT=test docker-compose push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_BIOVET == "yes"'

.docker-build-biovet-prod:
  tags: 
    - optimal-veteris-runner
  script:
    - export TAG=$(/bio-tag.sh)
    - git fetch --all
    - TAG=$TAG ENVIRONMENT=Production docker-compose build
    - TAG=$TAG ENVIRONMENT=Production docker-compose push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_BIOVET_PROD == "yes"'