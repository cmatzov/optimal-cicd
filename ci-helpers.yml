.clear-test-and-db-restore:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_CLEAR == "yes"'
  tags: 
    - optimal-novus-runner
  script:
    - /automations/runner/clear-test-and-db-restore.sh

.ikea-daily-backups:
  tags:
    - optimal-novus-runner
  environment:
    name: stage
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $BACKUPS == "yes"'
  script:
    - /automations/runner/ikea-daily-backups.sh

.analyze-backend:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      changes:
        - net/**/*
  tags:
    - optimal-novus-runner
  image: mcr.microsoft.com/dotnet/sdk:8.0
  script:
    - cd ./net
    - dotnet tool restore
    - dotnet build
    - dotnet roslynator analyze > roslynator.txt
    - cat roslynator.txt | grep "^0 diagnostics found$" 
    - dotnet jb inspectcode -o=inspectcode.xml -f="xml" --no-build Optimal.Novus.sln && grep "<Issues/>" ./inspectcode.xml
  artifacts:
    paths:
      - net/inspectcode.xml
      - net/roslynator.txt
    expire_in: 1 day
    when: always
  allow_failure: true

.analyze-frontend:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG == null'
      changes:
        - js/**/*
  tags:
    - optimal-novus-runner
  image: node:16
  script:
    - cd js
    - npm install
    - npm install -g expo-cli
    - cd packages/mobile
    - npm run install:mobile
    - cd ../..
    - npm run lint > fe-lint.txt
  artifacts:
    paths:
      - js/fe-lint.txt
    expire_in: 1 day
    when: always
  allow_failure: true
    
.build-ikea:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-IKEA-TAG.txt
      export PROJECT="ikea"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/ikea/**/*
        - net/shared/**/*
        - js/package.json
        - js/apps/mobile/package.json
        - js/apps/mobile/src/ikea/**/*
        - js/apps/mobile/src/shared/**/*
        - js/packages/common/package.json
        - js/packages/common/src/ikea-api/**/*
        - js/packages/common/src/shared/**/*
        - js/packages/web/package.json
        - js/packages/web/src/ikea/**/*
        - js/packages/web/src/shared/**/*
      when: manual

.build-ikea-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-IKEA-TAG.txt
      export PROJECT="ikea"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH !~ /^kti\/.*$/ && $CI_COMMIT_TAG == null'
      when: manual

.scheduled-docker-ikea-stage:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_STAGE_IKEA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - git fetch --all
    - VERSION=$(/automations/runner/versioning.sh IK Staging)
    - export TAG=$VERSION
    - echo $TAG > /automations/runner/STAGE-IKEA-TAG.txt
    - export PROJECT="ikea"
    - export KC_EXTERNAL_URL="https://stage.optim-al.app/auth"
    - export KC_HOSTNAME_URL="https://stage.optim-al.app"
    - devops/pipelines/build/docker-tmp.sh
    - docker-compose --env-file /automations/runner/.env config
    - docker-compose --env-file /automations/runner/.env build
    - docker-compose --env-file /automations/runner/.env push
    - curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.scheduled-docker-ikea-prod:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_PROD_IKEA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh IK Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/master-IKEA-TAG.txt
      export PROJECT="ikea"
      export KC_HOSTNAME_URL="ikea.optim-al.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.build-verila:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      echo $TAG > /automations/runner/${BRANCH}-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "kti" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/verila/**/*
        - net/shared/**/*
        - js/package.json
        - js/apps/mobile/package.json
        - js/apps/mobile/src/verila/**/*
        - js/apps/mobile/src/shared/**/*
        - js/packages/common/package.json
        - js/packages/common/src/verila-api/**/*
        - js/packages/common/src/shared/**/*
        - js/packages/web/package.json
        - js/packages/web/src/verila/**/*
        - js/packages/web/src/shared/**/*
      when: manual

.build-verila-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-VERILA-TAG.txt
      export PROJECT="verila"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH !~ /^kti\/.*$/ && $CI_COMMIT_TAG == null'
      when: manual

.scheduled-docker-verila-stage:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_STAGE_VERILA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: stage
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Staging)
      export TAG=$VERSION
      echo $TAG > /automations/runner/STAGE-VERILA-TAG.txt
      export PROJECT="verila"
      export KC_EXTERNAL_URL="https://stage.optim-al.app/auth"
      export KC_HOSTNAME_URL="https://stage.optim-al.app"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.scheduled-docker-verila-prod:
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_PROD_VERILA == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'
  tags: 
    - optimal-novus-runner
  environment:
    name: production
  script:
    - |
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh VE Production)
      export TAG=$VERSION
      echo $TAG > /automations/runner/master-VERILA-TAG.txt
      export PROJECT="verila"
      export KC_HOSTNAME_URL="cus.verila-bg.com"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
      curl -X POST "https://gitlab.optim-al.com/api/v4/projects/12/repository/tags?tag_name=${TAG}&ref=${CI_COMMIT_BRANCH}&release_description='.'&private_token=${GIT_PASSWD}" --form "variables[CI_SKIP]=true"

.build-kti:
  tags: 
    - optimal-novus-runner
  environment:
    name: test
  script:
    - |
      git fetch --all
      VERSION=$CI_PIPELINE_ID
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-KTI-TAG.txt
      export PROJECT="kti"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "web" && $CI_COMMIT_TAG == null'
      changes:
        - net/kti/**/*
        - js/apps/mobile/src/kti/**/*
        - js/packages/common/src/kti-api/**/*
        - js/packages/web/src/kti/**/*
      when: manual
    - if: '$CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH =~ /^kti\/.*$/'

.build-kti-uat:
  tags: 
    - optimal-novus-runner
  environment:
    name: uat
  script:
    - |
      git fetch --all
      BRANCH=$(echo "$CI_COMMIT_BRANCH" | sed 's/\//-/g')
      VERSION=$CI_PIPELINE_ID
      export TAG=$VERSION
      echo $TAG > /automations/runner/${BRANCH}-KTI-TAG.txt
      export PROJECT="kti"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config 
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules: 
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_UAT_KTI == "yes"'

.build-kti-stage:
  tags:
    - novus-kti-runner
  environment:
    name: stage
  script:
      git fetch --all
      VERSION=$(/automations/runner/versioning.sh KT Staging)
      export TAG=$VERSION
      echo $TAG > /automations/runner/STAGE-KTI-TAG.txt
      export PROJECT="kti"
      export KC_EXTERNAL_URL="https://testmrp.ktinternational.eu/auth"
      export KC_HOSTNAME_URL="https://testmrp.ktinternational.eu"
      devops/pipelines/build/docker-tmp.sh
      docker-compose --env-file /automations/runner/.env config
      docker-compose --env-file /automations/runner/.env build
      docker-compose --env-file /automations/runner/.env push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_STAGE_KTI == "yes" && $GITLAB_USER_LOGIN =~ $AUTHORIZED_USERS'

.build-biovet-service-artifacts:
  tags: 
    - $BIOVET_RUNNER
  before_script:
    - /automations/runner/buildkit.sh
  script:
    - |
      export VERSION=$CI_PIPELINE_ID
      if [[ $DEPLOY_BIOVET_STAGE == "yes" ]]; then
        export ENVIRONMENT="stage"
      elif [[ $DEPLOY_BIOVET == "yes" ]]; then
        export ENVIRONMENT="test"
      else
        echo "How did you trigger this job anyway, slick?"
      fi
      if [[ "$UPDATE_MOBILE" == "false" && "$UPDATE_OFFICE" == "true" ]]; then
        mkdir -p /var/automations/biovet/tmp/office && chmod 755 /var/automations/biovet/tmp/office
        ENABLE_DOCKER_BUILDKIT=1 docker buildx build --target office --build-arg environment=$ENVIRONMENT --build-arg version="0.0.${VERSION}.0" --output type=tar,dest=/var/automations/biovet/tmp/office/office.tar -f Office/Repository/Dockerfile .
        cd /var/automations/biovet/tmp/office && tar xf office.tar
        cd app/office && tar -cf office-${VERSION}.tar ./* && curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' --upload-file office-${VERSION}.tar "https://registry.optim-al.com/repository/veteris-artifacts/${ENVIRONMENT}/office/office-${VERSION}.tar"
        cd /var/automations/biovet && rm -rf /var/automations/biovet/tmp/office
      elif [[ "$UPDATE_MOBILE" == "true" && "$UPDATE_OFFICE" == "false" ]]; then
        mkdir -p /var/automations/biovet/tmp/mobile && chmod 755 /var/automations/biovet/tmp/mobile
        ENABLE_DOCKER_BUILDKIT=1 docker buildx build --target mobile --build-arg environment=$ENVIRONMENT --build-arg version="0.0.${VERSION}.0" --output type=tar,dest=/var/automations/biovet/tmp/mobile/mobile.tar -f Office/Repository/Dockerfile .
        cd /var/automations/biovet/tmp/mobile && tar xf mobile.tar
        cd app/mobile && tar -cf mobile-${VERSION}.tar ./* && curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' --upload-file mobile-${VERSION}.tar "https://registry.optim-al.com/repository/veteris-artifacts/${ENVIRONMENT}/mobile/mobile-${VERSION}.tar"
        cd /var/automations/biovet && rm -rf /var/automations/biovet/tmp/mobile
      elif [[ "$UPDATE_MOBILE" == "true" && "$UPDATE_OFFICE" == "true" ]]; then
        mkdir -p /var/automations/biovet/tmp/both && chmod 755 /var/automations/biovet/tmp/both
        ENABLE_DOCKER_BUILDKIT=1 docker buildx build --target mobile --build-arg environment=$ENVIRONMENT --build-arg version="0.0.${VERSION}.0" --output type=tar,dest=/var/automations/biovet/tmp/both/mobile.tar -f Office/Repository/Dockerfile .
        ENABLE_DOCKER_BUILDKIT=1 docker buildx build --target office --build-arg environment=$ENVIRONMENT --build-arg version="0.0.${VERSION}.0" --output type=tar,dest=/var/automations/biovet/tmp/both/office.tar -f Office/Repository/Dockerfile .
        cd /var/automations/biovet/tmp/both && tar xf mobile.tar && tar xf office.tar
        cd app/mobile && tar -cf mobile-${VERSION}.tar ./* && curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' --upload-file mobile-${VERSION}.tar "https://registry.optim-al.com/repository/veteris-artifacts/${ENVIRONMENT}/mobile/mobile-${VERSION}.tar"
        cd ../office && tar -cf office-${VERSION}.tar ./* && curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' --upload-file office-${VERSION}.tar "https://registry.optim-al.com/repository/veteris-artifacts/${ENVIRONMENT}/office/office-${VERSION}.tar"
      else
        echo "You messed up the variables silly! Go again and check them! Set to true whatever you want to update and to false what you don't want to update! If you set them both to false then why are you running this job?"
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_BIOVET == "yes" || $DEPLOY_BIOVET_STAGE == "yes"'

.rollback-biovet-services:
  tags:
    - $BIOVET_RUNNER
  before_script:
    - /automations/runner/buildkit.sh
  script:
    - |
      if [[ $DEPLOY_BIOVET_STAGE == "yes" ]]; then
        export ENVIRONMENT="stage"
      elif [[ $DEPLOY_BIOVET == "yes" ]]; then
        export ENVIRONMENT="test"
      else
        echo "How did you trigger this job anyway, slick?"
      fi
      if [[ "$ROLLBACK_MOBILE" == "true" && "$ROLLBACK_OFFICE" == "false" ]]; then
        LAST_MOBILE=$(/var/automations/biovet/last-id.sh mobile $ENVIRONMENT)
        curl -X DELETE -u '$REGISTRY_USER:$REGISTRY_PASSWORD' "https://registry.optim-al.com/service/rest/v1/assets/${LAST_MOBILE}"
      elif [[ "$ROLLBACK_MOBILE" == "false" && "$ROLLBACK_OFFICE" == "true" ]]; then
        LAST_OFFICE=$(/var/automations/biovet/last-id.sh office $ENVIRONMENT)
        curl -X DELETE -u '$REGISTRY_USER:$REGISTRY_PASSWORD' "https://registry.optim-al.com/service/rest/v1/assets/${LAST_OFFICE}"
      elif [[ "$ROLLBACK_MOBILE" == "true" && "$ROLLBACK_OFFICE" == "true" ]]; then
        echo "Deploying former image..."
      else
        echo "How did you even mess this up? Check variables and branches and retry."
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $ROLLBACK_BIOVET == "true" || $ROLLBACK_BIOVET_STAGE == "true"'

.docker-build-biovet-repository:
  tags: 
    - $BIOVET_RUNNER
  before_script:
    - apk add jq
  script:
    - |
      if [[ $DEPLOY_BIOVET_STAGE == "yes" ]]; then
        export ENVIRONMENT="stage"
        export TAG=$(/var/automations/biovet/bio-tag.sh)
      elif [[ $DEPLOY_BIOVET == "yes" ]]; then
        export ENVIRONMENT="test"
        export TAG=$CI_PIPELINE_ID
      else
        echo "How did you trigger this job anyway, slick?"
      fi
      if [[ "$ROLLBACK_MOBILE" == "true" && "$ROLLBACK_OFFICE" == "true" ]]; then
        echo "Skipping the build step..."
      else
        LAST_MOBILE=$(/var/automations/biovet/last-tag.sh mobile $ENVIRONMENT)
        LAST_OFFICE=$(/var/automations/biovet/last-tag.sh office $ENVIRONMENT)
        echo $LAST_MOBILE $LAST_OFFICE
        mkdir mobile && cd mobile
        curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' -O "https://registry.optim-al.com/repository/veteris-artifacts/${LAST_MOBILE}" && tar xf mobile-*.tar
        cd ..
        mkdir office && cd office
        curl -u '$REGISTRY_USER:$REGISTRY_PASSWORD' -O "https://registry.optim-al.com/repository/veteris-artifacts/${LAST_OFFICE}" && tar xf office-*.tar
        cd ..
        ENVIRONMENT="${ENVIRONMENT}" TAG="${TAG}" GIT_BRANCH=${CI_COMMIT_BRANCH} GIT_COMMIT_ID=$(git show -s --format=%h) docker-compose build repository server gateway
        ENVIRONMENT="${ENVIRONMENT}" TAG="${TAG}" GIT_BRANCH=${CI_COMMIT_BRANCH} GIT_COMMIT_ID=$(git show -s --format=%h) docker-compose push repository server gateway
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $DEPLOY_BIOVET == "yes" || $DEPLOY_BIOVET_STAGE == "yes"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $ROLLBACK_BIOVET == "true" || $ROLLBACK_BIOVET_STAGE == "true"'